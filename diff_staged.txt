diff --git a/.gitignore b/.gitignore
index 5d2f333..a0899e6 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,9 +1,8 @@
 HELP.md
-target/
 !.mvn/wrapper/maven-wrapper.jar
-!**/src/main/**/target/
-!**/src/test/**/target/
-logs/
+**/target
+# Log files
+*.log
 
 ### STS ###
 .apt_generated
diff --git a/.mvn/wrapper/maven-wrapper.jar b/.mvn/wrapper/maven-wrapper.jar
deleted file mode 100644
index bf82ff0..0000000
Binary files a/.mvn/wrapper/maven-wrapper.jar and /dev/null differ
diff --git a/.mvn/wrapper/maven-wrapper.properties b/.mvn/wrapper/maven-wrapper.properties
deleted file mode 100644
index ca5ab4b..0000000
--- a/.mvn/wrapper/maven-wrapper.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#   https://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.7/apache-maven-3.8.7-bin.zip
-wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.1/maven-wrapper-3.1.1.jar
diff --git a/mvnw b/mvnw
deleted file mode 100755
index 8a8fb22..0000000
--- a/mvnw
+++ /dev/null
@@ -1,316 +0,0 @@
-#!/bin/sh
-# ----------------------------------------------------------------------------
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#    https://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-# ----------------------------------------------------------------------------
-
-# ----------------------------------------------------------------------------
-# Maven Start Up Batch script
-#
-# Required ENV vars:
-# ------------------
-#   JAVA_HOME - location of a JDK home dir
-#
-# Optional ENV vars
-# -----------------
-#   M2_HOME - location of maven2's installed home dir
-#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
-#     e.g. to debug Maven itself, use
-#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
-#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
-# ----------------------------------------------------------------------------
-
-if [ -z "$MAVEN_SKIP_RC" ] ; then
-
-  if [ -f /usr/local/etc/mavenrc ] ; then
-    . /usr/local/etc/mavenrc
-  fi
-
-  if [ -f /etc/mavenrc ] ; then
-    . /etc/mavenrc
-  fi
-
-  if [ -f "$HOME/.mavenrc" ] ; then
-    . "$HOME/.mavenrc"
-  fi
-
-fi
-
-# OS specific support.  $var _must_ be set to either true or false.
-cygwin=false;
-darwin=false;
-mingw=false
-case "`uname`" in
-  CYGWIN*) cygwin=true ;;
-  MINGW*) mingw=true;;
-  Darwin*) darwin=true
-    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
-    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
-    if [ -z "$JAVA_HOME" ]; then
-      if [ -x "/usr/libexec/java_home" ]; then
-        export JAVA_HOME="`/usr/libexec/java_home`"
-      else
-        export JAVA_HOME="/Library/Java/Home"
-      fi
-    fi
-    ;;
-esac
-
-if [ -z "$JAVA_HOME" ] ; then
-  if [ -r /etc/gentoo-release ] ; then
-    JAVA_HOME=`java-config --jre-home`
-  fi
-fi
-
-if [ -z "$M2_HOME" ] ; then
-  ## resolve links - $0 may be a link to maven's home
-  PRG="$0"
-
-  # need this for relative symlinks
-  while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-      PRG="$link"
-    else
-      PRG="`dirname "$PRG"`/$link"
-    fi
-  done
-
-  saveddir=`pwd`
-
-  M2_HOME=`dirname "$PRG"`/..
-
-  # make it fully qualified
-  M2_HOME=`cd "$M2_HOME" && pwd`
-
-  cd "$saveddir"
-  # echo Using m2 at $M2_HOME
-fi
-
-# For Cygwin, ensure paths are in UNIX format before anything is touched
-if $cygwin ; then
-  [ -n "$M2_HOME" ] &&
-    M2_HOME=`cygpath --unix "$M2_HOME"`
-  [ -n "$JAVA_HOME" ] &&
-    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-  [ -n "$CLASSPATH" ] &&
-    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
-fi
-
-# For Mingw, ensure paths are in UNIX format before anything is touched
-if $mingw ; then
-  [ -n "$M2_HOME" ] &&
-    M2_HOME="`(cd "$M2_HOME"; pwd)`"
-  [ -n "$JAVA_HOME" ] &&
-    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
-fi
-
-if [ -z "$JAVA_HOME" ]; then
-  javaExecutable="`which javac`"
-  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
-    # readlink(1) is not available as standard on Solaris 10.
-    readLink=`which readlink`
-    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
-      if $darwin ; then
-        javaHome="`dirname \"$javaExecutable\"`"
-        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
-      else
-        javaExecutable="`readlink -f \"$javaExecutable\"`"
-      fi
-      javaHome="`dirname \"$javaExecutable\"`"
-      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
-      JAVA_HOME="$javaHome"
-      export JAVA_HOME
-    fi
-  fi
-fi
-
-if [ -z "$JAVACMD" ] ; then
-  if [ -n "$JAVA_HOME"  ] ; then
-    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
-      # IBM's JDK on AIX uses strange locations for the executables
-      JAVACMD="$JAVA_HOME/jre/sh/java"
-    else
-      JAVACMD="$JAVA_HOME/bin/java"
-    fi
-  else
-    JAVACMD="`\\unset -f command; \\command -v java`"
-  fi
-fi
-
-if [ ! -x "$JAVACMD" ] ; then
-  echo "Error: JAVA_HOME is not defined correctly." >&2
-  echo "  We cannot execute $JAVACMD" >&2
-  exit 1
-fi
-
-if [ -z "$JAVA_HOME" ] ; then
-  echo "Warning: JAVA_HOME environment variable is not set."
-fi
-
-CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher
-
-# traverses directory structure from process work directory to filesystem root
-# first directory with .mvn subdirectory is considered project base directory
-find_maven_basedir() {
-
-  if [ -z "$1" ]
-  then
-    echo "Path not specified to find_maven_basedir"
-    return 1
-  fi
-
-  basedir="$1"
-  wdir="$1"
-  while [ "$wdir" != '/' ] ; do
-    if [ -d "$wdir"/.mvn ] ; then
-      basedir=$wdir
-      break
-    fi
-    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
-    if [ -d "${wdir}" ]; then
-      wdir=`cd "$wdir/.."; pwd`
-    fi
-    # end of workaround
-  done
-  echo "${basedir}"
-}
-
-# concatenates all lines of a file
-concat_lines() {
-  if [ -f "$1" ]; then
-    echo "$(tr -s '\n' ' ' < "$1")"
-  fi
-}
-
-BASE_DIR=`find_maven_basedir "$(pwd)"`
-if [ -z "$BASE_DIR" ]; then
-  exit 1;
-fi
-
-##########################################################################################
-# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
-# This allows using the maven wrapper in projects that prohibit checking in binary data.
-##########################################################################################
-if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
-    if [ "$MVNW_VERBOSE" = true ]; then
-      echo "Found .mvn/wrapper/maven-wrapper.jar"
-    fi
-else
-    if [ "$MVNW_VERBOSE" = true ]; then
-      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
-    fi
-    if [ -n "$MVNW_REPOURL" ]; then
-      jarUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
-    else
-      jarUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
-    fi
-    while IFS="=" read key value; do
-      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
-      esac
-    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
-    if [ "$MVNW_VERBOSE" = true ]; then
-      echo "Downloading from: $jarUrl"
-    fi
-    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
-    if $cygwin; then
-      wrapperJarPath=`cygpath --path --windows "$wrapperJarPath"`
-    fi
-
-    if command -v wget > /dev/null; then
-        if [ "$MVNW_VERBOSE" = true ]; then
-          echo "Found wget ... using wget"
-        fi
-        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
-            wget "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
-        else
-            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
-        fi
-    elif command -v curl > /dev/null; then
-        if [ "$MVNW_VERBOSE" = true ]; then
-          echo "Found curl ... using curl"
-        fi
-        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
-            curl -o "$wrapperJarPath" "$jarUrl" -f
-        else
-            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o "$wrapperJarPath" "$jarUrl" -f
-        fi
-
-    else
-        if [ "$MVNW_VERBOSE" = true ]; then
-          echo "Falling back to using Java to download"
-        fi
-        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
-        # For Cygwin, switch paths to Windows format before running javac
-        if $cygwin; then
-          javaClass=`cygpath --path --windows "$javaClass"`
-        fi
-        if [ -e "$javaClass" ]; then
-            if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
-                if [ "$MVNW_VERBOSE" = true ]; then
-                  echo " - Compiling MavenWrapperDownloader.java ..."
-                fi
-                # Compiling the Java class
-                ("$JAVA_HOME/bin/javac" "$javaClass")
-            fi
-            if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
-                # Running the downloader
-                if [ "$MVNW_VERBOSE" = true ]; then
-                  echo " - Running MavenWrapperDownloader.java ..."
-                fi
-                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
-            fi
-        fi
-    fi
-fi
-##########################################################################################
-# End of extension
-##########################################################################################
-
-export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
-if [ "$MVNW_VERBOSE" = true ]; then
-  echo $MAVEN_PROJECTBASEDIR
-fi
-MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"
-
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin; then
-  [ -n "$M2_HOME" ] &&
-    M2_HOME=`cygpath --path --windows "$M2_HOME"`
-  [ -n "$JAVA_HOME" ] &&
-    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
-  [ -n "$CLASSPATH" ] &&
-    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
-  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
-    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
-fi
-
-# Provide a "standardized" way to retrieve the CLI args that will
-# work with both Windows and non-Windows executions.
-MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $@"
-export MAVEN_CMD_LINE_ARGS
-
-WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
-
-exec "$JAVACMD" \
-  $MAVEN_OPTS \
-  $MAVEN_DEBUG_OPTS \
-  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
-  "-Dmaven.home=${M2_HOME}" \
-  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
-  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
diff --git a/mvnw.cmd b/mvnw.cmd
deleted file mode 100644
index 1d8ab01..0000000
--- a/mvnw.cmd
+++ /dev/null
@@ -1,188 +0,0 @@
-@REM ----------------------------------------------------------------------------
-@REM Licensed to the Apache Software Foundation (ASF) under one
-@REM or more contributor license agreements.  See the NOTICE file
-@REM distributed with this work for additional information
-@REM regarding copyright ownership.  The ASF licenses this file
-@REM to you under the Apache License, Version 2.0 (the
-@REM "License"); you may not use this file except in compliance
-@REM with the License.  You may obtain a copy of the License at
-@REM
-@REM    https://www.apache.org/licenses/LICENSE-2.0
-@REM
-@REM Unless required by applicable law or agreed to in writing,
-@REM software distributed under the License is distributed on an
-@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-@REM KIND, either express or implied.  See the License for the
-@REM specific language governing permissions and limitations
-@REM under the License.
-@REM ----------------------------------------------------------------------------
-
-@REM ----------------------------------------------------------------------------
-@REM Maven Start Up Batch script
-@REM
-@REM Required ENV vars:
-@REM JAVA_HOME - location of a JDK home dir
-@REM
-@REM Optional ENV vars
-@REM M2_HOME - location of maven2's installed home dir
-@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
-@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
-@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
-@REM     e.g. to debug Maven itself, use
-@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
-@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
-@REM ----------------------------------------------------------------------------
-
-@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
-@echo off
-@REM set title of command window
-title %0
-@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
-@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%
-
-@REM set %HOME% to equivalent of $HOME
-if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")
-
-@REM Execute a user defined script before this one
-if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
-@REM check for pre script, once with legacy .bat ending and once with .cmd ending
-if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
-if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
-:skipRcPre
-
-@setlocal
-
-set ERROR_CODE=0
-
-@REM To isolate internal variables from possible post scripts, we use another setlocal
-@setlocal
-
-@REM ==== START VALIDATION ====
-if not "%JAVA_HOME%" == "" goto OkJHome
-
-echo.
-echo Error: JAVA_HOME not found in your environment. >&2
-echo Please set the JAVA_HOME variable in your environment to match the >&2
-echo location of your Java installation. >&2
-echo.
-goto error
-
-:OkJHome
-if exist "%JAVA_HOME%\bin\java.exe" goto init
-
-echo.
-echo Error: JAVA_HOME is set to an invalid directory. >&2
-echo JAVA_HOME = "%JAVA_HOME%" >&2
-echo Please set the JAVA_HOME variable in your environment to match the >&2
-echo location of your Java installation. >&2
-echo.
-goto error
-
-@REM ==== END VALIDATION ====
-
-:init
-
-@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
-@REM Fallback to current working directory if not found.
-
-set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
-IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir
-
-set EXEC_DIR=%CD%
-set WDIR=%EXEC_DIR%
-:findBaseDir
-IF EXIST "%WDIR%"\.mvn goto baseDirFound
-cd ..
-IF "%WDIR%"=="%CD%" goto baseDirNotFound
-set WDIR=%CD%
-goto findBaseDir
-
-:baseDirFound
-set MAVEN_PROJECTBASEDIR=%WDIR%
-cd "%EXEC_DIR%"
-goto endDetectBaseDir
-
-:baseDirNotFound
-set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
-cd "%EXEC_DIR%"
-
-:endDetectBaseDir
-
-IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig
-
-@setlocal EnableExtensions EnableDelayedExpansion
-for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
-@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%
-
-:endReadAdditionalConfig
-
-SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
-set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
-set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
-
-set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
-
-FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
-    IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
-)
-
-@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
-@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
-if exist %WRAPPER_JAR% (
-    if "%MVNW_VERBOSE%" == "true" (
-        echo Found %WRAPPER_JAR%
-    )
-) else (
-    if not "%MVNW_REPOURL%" == "" (
-        SET DOWNLOAD_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
-    )
-    if "%MVNW_VERBOSE%" == "true" (
-        echo Couldn't find %WRAPPER_JAR%, downloading it ...
-        echo Downloading from: %DOWNLOAD_URL%
-    )
-
-    powershell -Command "&{"^
-		"$webclient = new-object System.Net.WebClient;"^
-		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
-		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
-		"}"^
-		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
-		"}"
-    if "%MVNW_VERBOSE%" == "true" (
-        echo Finished downloading %WRAPPER_JAR%
-    )
-)
-@REM End of extension
-
-@REM Provide a "standardized" way to retrieve the CLI args that will
-@REM work with both Windows and non-Windows executions.
-set MAVEN_CMD_LINE_ARGS=%*
-
-%MAVEN_JAVA_EXE% ^
-  %JVM_CONFIG_MAVEN_PROPS% ^
-  %MAVEN_OPTS% ^
-  %MAVEN_DEBUG_OPTS% ^
-  -classpath %WRAPPER_JAR% ^
-  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
-  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
-if ERRORLEVEL 1 goto error
-goto end
-
-:error
-set ERROR_CODE=1
-
-:end
-@endlocal & set ERROR_CODE=%ERROR_CODE%
-
-if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
-@REM check for post script, once with legacy .bat ending and once with .cmd ending
-if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
-if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
-:skipRcPost
-
-@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
-if "%MAVEN_BATCH_PAUSE%"=="on" pause
-
-if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%
-
-cmd /C exit /B %ERROR_CODE%
diff --git a/pom.xml b/pom.xml
index 2fe6c23..91e7b1e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -47,7 +47,7 @@
 		<dependency>
 			<groupId>org.slf4j</groupId>
 			<artifactId>slf4j-api</artifactId>
-			<version>1.6.6</version>
+			<version>1.7.36</version>
 		</dependency>
 		<dependency>
 			<groupId>ch.qos.logback</groupId>
@@ -64,41 +64,5 @@
 			</plugin>
 		</plugins>
 	</build>
-	<repositories>
-		<repository>
-			<id>spring-milestones</id>
-			<name>Spring Milestones</name>
-			<url>https://repo.spring.io/milestone</url>
-			<snapshots>
-				<enabled>false</enabled>
-			</snapshots>
-		</repository>
-		<repository>
-			<id>spring-snapshots</id>
-			<name>Spring Snapshots</name>
-			<url>https://repo.spring.io/snapshot</url>
-			<releases>
-				<enabled>false</enabled>
-			</releases>
-		</repository>
-	</repositories>
-	<pluginRepositories>
-		<pluginRepository>
-			<id>spring-milestones</id>
-			<name>Spring Milestones</name>
-			<url>https://repo.spring.io/milestone</url>
-			<snapshots>
-				<enabled>false</enabled>
-			</snapshots>
-		</pluginRepository>
-		<pluginRepository>
-			<id>spring-snapshots</id>
-			<name>Spring Snapshots</name>
-			<url>https://repo.spring.io/snapshot</url>
-			<releases>
-				<enabled>false</enabled>
-			</releases>
-		</pluginRepository>
-	</pluginRepositories>
 
 </project>
diff --git a/src/main/java/com/example/springbootexercisementoring/auth/AuthController.java b/src/main/java/com/example/springbootexercisementoring/auth/AuthController.java
index 4cece65..578e890 100644
--- a/src/main/java/com/example/springbootexercisementoring/auth/AuthController.java
+++ b/src/main/java/com/example/springbootexercisementoring/auth/AuthController.java
@@ -1,5 +1,6 @@
 package com.example.springbootexercisementoring.auth;
 
+import com.example.springbootexercisementoring.session.SessionService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestHeader;
@@ -11,16 +12,19 @@ import org.springframework.web.bind.annotation.RestController;
 @RequestMapping("/api")
 public class AuthController {
 
-  @Autowired
-  private AuthService authService;
+  private final SessionService sessionService;
+
+  public AuthController(SessionService sessionService) {
+    this.sessionService = sessionService;
+  }
 
   @PostMapping("/login")
-  public String login(@RequestParam String name) {
-    return authService.login(name);
+  public void login(@RequestParam String name) {
+     sessionService.login(name);
   }
 
   @PostMapping("/logout")
   public void logout(@RequestHeader("Authorization") String token) {
-    authService.logout(token);
+    sessionService.logout(token);
   }
 }
diff --git a/src/main/java/com/example/springbootexercisementoring/auth/AuthService.java b/src/main/java/com/example/springbootexercisementoring/auth/AuthService.java
deleted file mode 100644
index 670bb33..0000000
--- a/src/main/java/com/example/springbootexercisementoring/auth/AuthService.java
+++ /dev/null
@@ -1,56 +0,0 @@
-package com.example.springbootexercisementoring.auth;
-
-import com.example.springbootexercisementoring.exceptions.UnauthorizedException;
-import com.example.springbootexercisementoring.session.Session;
-import com.example.springbootexercisementoring.session.SessionService;
-import com.example.springbootexercisementoring.user.User;
-import com.example.springbootexercisementoring.user.UserRepository;
-import java.time.LocalDateTime;
-import java.util.Optional;
-import java.util.UUID;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Service;
-
-@Service
-public class AuthService {
-
-  private static final Logger logger = LoggerFactory.getLogger(AuthService.class);
-
-  @Autowired
-  private UserRepository userRepository;
-  @Autowired
-  private SessionService sessionService;
-
-  public String login(String name) {
-    Optional<User> userOptional = userRepository.findByLoginName(name);
-    if (userOptional.isPresent()) {
-      String token = generateRandomToken();
-      Session session = new Session();
-      session.setToken(token);
-      session.setTimestamp(LocalDateTime.now());
-      session.setUser(userOptional.get());
-      sessionService.createSession(userOptional.get(), session);
-      logger.info("Użytkownik o loginie '{}' zalogowany. Token: {}", name, token);
-      return token;
-    } else {
-      logger.warn("Próba logowania nieistniejącego użytkownika o loginie '{}'", name);
-      throw new UnauthorizedException("Użytkownik nie istnieje.");
-    }
-  }
-
-  public void logout(String token) {
-    if (sessionService.isSessionValid(token)) {
-      sessionService.removeSession(token);
-      logger.info("Wylogowano użytkownika o tokenie '{}'", token);
-    } else {
-      logger.info("Sesja o tokenie '{}' nie istnieje", token);
-    }
-
-  }
-
-  private String generateRandomToken() {
-    return UUID.randomUUID().toString();
-  }
-}
diff --git a/src/main/java/com/example/springbootexercisementoring/session/DefaultSessionService.java b/src/main/java/com/example/springbootexercisementoring/session/DefaultSessionService.java
index 02faf04..de913e3 100644
--- a/src/main/java/com/example/springbootexercisementoring/session/DefaultSessionService.java
+++ b/src/main/java/com/example/springbootexercisementoring/session/DefaultSessionService.java
@@ -1,26 +1,34 @@
 package com.example.springbootexercisementoring.session;
 
+import com.example.springbootexercisementoring.exceptions.UnauthorizedException;
 import com.example.springbootexercisementoring.user.User;
+import com.example.springbootexercisementoring.user.UserRepository;
 import java.time.LocalDateTime;
+import java.util.HashMap;
 import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
+import java.util.Optional;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.scheduling.annotation.Scheduled;
+import org.springframework.stereotype.Service;
 
+@Service
 public class DefaultSessionService implements SessionService {
 
+  @Autowired
+  private UserRepository userRepository;
   private static final Logger logger = LoggerFactory.getLogger(DefaultSessionService.class);
 
   private final long sessionTimeoutMinutes = 5;
-  private final Map<String, Session> sessionMap = new ConcurrentHashMap<>();
+  private final Map<String, Session> sessionMap = new HashMap<>();
   private final Object sessionLock = new Object();
 
-  public void createSession(User user, Session session) {
-
+  public void createSession(User user) {
+    Session session = new Session(user.getId());
     synchronized (sessionLock) {
       sessionMap.put(user.getId(), session);
-      logger.info("Utworzono sesję dla użytkownika o ID: {}", user.getId());
+      logger.info("A session has been created for a user with ID: {}", user.getId());
     }
   }
 
@@ -28,40 +36,20 @@ public class DefaultSessionService implements SessionService {
     return sessionMap.get(userId);
   }
 
-  public void removeSession(String token) {
+  public void removeSession(Session session) {
     synchronized (sessionLock) {
-      for (Map.Entry<String, Session> entry : sessionMap.entrySet()) {
-        if (entry.getValue().getToken().equals(token)) {
-          String userId = entry.getKey();
-          sessionMap.remove(userId);
-          logger.info("Usunięto sesję dla użytkownika o ID: {}", userId);
-          break;
+          sessionMap.remove(session.getUserId());
+          logger.info("A session for a user with ID has been deleted: {}", session.getUserId());
         }
       }
-    }
-  }
 
-  public boolean isSessionValid(String token) {
+  public Optional<Session> isSessionValid(String token) {
     for (Session sessionInfo : sessionMap.values()) {
       if (sessionInfo.getToken().equals(token)) {
-        return true;
+        return Optional.of(sessionInfo);
       }
     }
-    return false;
-  }
-
-  public boolean isSessionExpired(String token) {
-    Session sessionInfo = sessionMap.get(token);
-
-    if (sessionInfo != null) {
-      LocalDateTime now = LocalDateTime.now();
-      LocalDateTime sessionTimestamp = sessionInfo.getTimestamp();
-      long elapsedTimeMinutes = java.time.Duration.between(sessionTimestamp, now).toMinutes();
-
-      return elapsedTimeMinutes <= sessionTimeoutMinutes;
-    } else {
-      return false;
-    }
+    return Optional.empty();
   }
 
   @Scheduled(fixedRate = 30000)
@@ -75,11 +63,35 @@ public class DefaultSessionService implements SessionService {
             .toMinutes();
         boolean isExpired = elapsedTimeMinutes > sessionTimeoutMinutes;
         if (isExpired) {
-          logger.info("Usunięto wygasłą sesję dla użytkownika o ID: {}", session.getUser().getId());
+          logger.info("Deleted an expired session for a user with ID: {}", session.getUserId());
         }
         return isExpired;
       });
-      logger.info("Liczba pozostających sesji: {}", sessionMap.size());
+      logger.info("Number of remaining sessions: {}", sessionMap.size());
     }
   }
+
+  @Override
+  public void login(String name) {
+    Optional<User> userOptional = userRepository.findByLoginName(name);
+    if (userOptional.isPresent()) {
+      createSession(userOptional.get());
+      logger.info("User with login '{}' logged in", name);
+    } else {
+      logger.warn("Attempting to log in a non-existent user with login '{}'", name);
+      throw new UnauthorizedException("The user does not exist.");
+    }
+  }
+
+  @Override
+  public void logout(String token) {
+    Optional<Session> sessionOptional = isSessionValid(token);
+    if (sessionOptional.isPresent()) {
+      removeSession(sessionOptional.get());
+      logger.info("Logged out user with userId '{}'",sessionOptional.get().getUserId());
+    } else {
+      logger.info("Session with token '{}' does not exist", token);
+    }
+
+  }
 }
diff --git a/src/main/java/com/example/springbootexercisementoring/session/RWLSessionService.java b/src/main/java/com/example/springbootexercisementoring/session/RWLSessionService.java
index f4a0338..93e8043 100644
--- a/src/main/java/com/example/springbootexercisementoring/session/RWLSessionService.java
+++ b/src/main/java/com/example/springbootexercisementoring/session/RWLSessionService.java
@@ -1,27 +1,36 @@
 package com.example.springbootexercisementoring.session;
 
+import com.example.springbootexercisementoring.exceptions.UnauthorizedException;
 import com.example.springbootexercisementoring.user.User;
+import com.example.springbootexercisementoring.user.UserRepository;
 import java.time.LocalDateTime;
+import java.util.HashMap;
 import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
+import java.util.Optional;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.scheduling.annotation.Scheduled;
+import org.springframework.stereotype.Service;
+
 
 public class RWLSessionService implements SessionService {
 
   private static final Logger logger = LoggerFactory.getLogger(RWLSessionService.class);
   private final long sessionTimeoutMinutes = 5;
-  private final Map<String, Session> sessionMap = new ConcurrentHashMap<>();
+  private final Map<String, Session> sessionMap = new HashMap<>();
   private final ReadWriteLock sessionLock = new ReentrantReadWriteLock();
+  @Autowired
+  private UserRepository userRepository;
 
-  public void createSession(User user, Session session) {
+  public void createSession(User user) {
     sessionLock.writeLock().lock();
     try {
-      sessionMap.put(user.getId(), session);
-      logger.info("Utworzono sesję dla użytkownika o ID: {}", user.getId());
+      Session session = new Session(user.getId());
+      sessionMap.put(user.getId(),session);
+      logger.info("A session has been created for a user with ID: {}", user.getId());
     } finally {
       sessionLock.writeLock().unlock();
     }
@@ -36,50 +45,25 @@ public class RWLSessionService implements SessionService {
     }
   }
 
-  public void removeSession(String token) {
+  public void removeSession(Session session) {
     sessionLock.writeLock().lock();
     try {
-      for (Map.Entry<String, Session> entry : sessionMap.entrySet()) {
-        if (entry.getValue().getToken().equals(token)) {
-          String userId = entry.getKey();
-          sessionMap.remove(userId);
-          logger.info("Usunięto sesję dla użytkownika o ID: {}", userId);
-          break;
-        }
-      }
+          sessionMap.remove(session.getUserId());
+          logger.info("A session for a user with ID has been deleted: {}", session.getUserId());
     } finally {
       sessionLock.writeLock().unlock();
     }
   }
 
-  public boolean isSessionValid(String token) {
+  public Optional<Session> isSessionValid(String token) {
     sessionLock.readLock().lock();
     try {
       for (Session sessionInfo : sessionMap.values()) {
         if (sessionInfo.getToken().equals(token)) {
-          return true;
+          return Optional.of(sessionInfo);
         }
       }
-      return false;
-    } finally {
-      sessionLock.readLock().unlock();
-    }
-  }
-
-  public boolean isSessionExpired(String token) {
-    sessionLock.readLock().lock();
-    try {
-      Session sessionInfo = sessionMap.get(token);
-
-      if (sessionInfo == null) {
-        return false;
-      }
-
-      LocalDateTime now = LocalDateTime.now();
-      LocalDateTime sessionTimestamp = sessionInfo.getTimestamp();
-      long elapsedTimeMinutes = java.time.Duration.between(sessionTimestamp, now).toMinutes();
-
-      return elapsedTimeMinutes <= sessionTimeoutMinutes;
+      return Optional.empty();
     } finally {
       sessionLock.readLock().unlock();
     }
@@ -97,14 +81,31 @@ public class RWLSessionService implements SessionService {
             .toMinutes();
         boolean isExpired = elapsedTimeMinutes > sessionTimeoutMinutes;
         if (isExpired) {
-          logger.info("Usunięto wygasłą sesję dla użytkownika o ID: {}", session.getUser().getId());
+          logger.info("Deleted an expired session for a user with ID: {}", session.getUserId());
         }
         return isExpired;
       });
-      logger.info("Liczba pozostających sesji: {}", sessionMap.size());
+      logger.info("Number of remaining sessions: {}", sessionMap.size());
     } finally {
       sessionLock.writeLock().unlock();
     }
   }
 
+  @Override
+  public void login(String name) {
+    Optional<User> userOptional = userRepository.findByLoginName(name);
+    if (userOptional.isPresent()) {
+      createSession(userOptional.get());
+      logger.info("User with login '{}' logged in", name);
+    } else {
+      logger.warn("Attempting to log in a non-existent user with login '{}'", name);
+      throw new UnauthorizedException("The user does not exist.");
+    }
+  }
+
+  @Override
+  public void logout(String token) {
+
+  }
+
 }
diff --git a/src/main/java/com/example/springbootexercisementoring/session/Session.java b/src/main/java/com/example/springbootexercisementoring/session/Session.java
index 2d4b1c6..246ff66 100644
--- a/src/main/java/com/example/springbootexercisementoring/session/Session.java
+++ b/src/main/java/com/example/springbootexercisementoring/session/Session.java
@@ -1,17 +1,22 @@
 package com.example.springbootexercisementoring.session;
 
-import com.example.springbootexercisementoring.user.User;
 import java.time.LocalDateTime;
+import java.util.UUID;
 
 
 public class Session {
 
-
   private String token;
 
   private LocalDateTime timestamp;
 
-  private User user;
+  private String userId;
+  private static final long sessionTimeoutMinutes = 5;
+  public Session(String userId) {
+    this.userId = userId;
+    this.timestamp=LocalDateTime.now();
+    this.token=generateRandomToken();
+  }
 
   public String getToken() {
     return token;
@@ -29,11 +34,20 @@ public class Session {
     this.timestamp = timestamp;
   }
 
-  public User getUser() {
-    return user;
+  public String getUserId() {
+    return userId;
+  }
+
+  public void setUserId(String userId) {
+    this.userId = userId;
   }
 
-  public void setUser(User user) {
-    this.user = user;
+  private String generateRandomToken() {
+    return UUID.randomUUID().toString();
   }
+
+  public boolean isSessionExpired() {
+      return timestamp.plusMinutes(sessionTimeoutMinutes).isBefore(LocalDateTime.now());
+  }
+
 }
diff --git a/src/main/java/com/example/springbootexercisementoring/session/SessionInterceptor.java b/src/main/java/com/example/springbootexercisementoring/session/SessionInterceptor.java
index 10b0f99..eee6d71 100644
--- a/src/main/java/com/example/springbootexercisementoring/session/SessionInterceptor.java
+++ b/src/main/java/com/example/springbootexercisementoring/session/SessionInterceptor.java
@@ -1,5 +1,6 @@
 package com.example.springbootexercisementoring.session;
 
+import java.util.Optional;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -24,10 +25,10 @@ public class SessionInterceptor implements HandlerInterceptor {
     }
 
     String sessionToken = request.getHeader("Authorization");
-
+    Optional<Session> sessionOptional=sessionService.isSessionValid(sessionToken);
     // Sprawdź, czy sesja istnieje
-    if (sessionToken != null && sessionService.isSessionValid(sessionToken)) {
-      if (sessionService.isSessionExpired(sessionToken)) {
+    if (sessionToken != null && sessionOptional.isPresent()) {
+      if (sessionOptional.get().isSessionExpired()) {
         return true;
       } else {
         response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Session has expired");
diff --git a/src/main/java/com/example/springbootexercisementoring/session/SessionService.java b/src/main/java/com/example/springbootexercisementoring/session/SessionService.java
index f086e48..291f2c1 100644
--- a/src/main/java/com/example/springbootexercisementoring/session/SessionService.java
+++ b/src/main/java/com/example/springbootexercisementoring/session/SessionService.java
@@ -1,20 +1,23 @@
 package com.example.springbootexercisementoring.session;
 
 import com.example.springbootexercisementoring.user.User;
-import org.springframework.scheduling.annotation.Scheduled;
+import java.util.Optional;
+import org.springframework.stereotype.Service;
 
+@Service
 public interface SessionService {
 
-  void createSession(User user, Session session);
+  void createSession(User user);
 
   Session getSession(String userId);
 
-  void removeSession(String token);
+  void removeSession(Session session);
 
-  boolean isSessionValid(String token);
+  Optional<Session> isSessionValid(String token);
 
-  boolean isSessionExpired(String token);
-
-  @Scheduled(fixedRate = 30000)
   void removeExpiredSessions();
+
+  void login(String name);
+
+  void logout(String token);
 }
diff --git a/src/main/java/com/example/springbootexercisementoring/user/User.java b/src/main/java/com/example/springbootexercisementoring/user/User.java
index 2ebd0ff..37d6b14 100644
--- a/src/main/java/com/example/springbootexercisementoring/user/User.java
+++ b/src/main/java/com/example/springbootexercisementoring/user/User.java
@@ -9,7 +9,7 @@ public class User {
     @Id
     @Column
     private String id;
-    @Column
+    @Column(name = "")
     private String loginName;
 
     public String getId() {
diff --git a/src/main/java/com/example/springbootexercisementoring/user/UserRepository.java b/src/main/java/com/example/springbootexercisementoring/user/UserRepository.java
index e4df5fa..0c9a172 100644
--- a/src/main/java/com/example/springbootexercisementoring/user/UserRepository.java
+++ b/src/main/java/com/example/springbootexercisementoring/user/UserRepository.java
@@ -2,7 +2,9 @@ package com.example.springbootexercisementoring.user;
 
 import java.util.Optional;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
 
+@Repository
 public interface UserRepository extends JpaRepository<User, String> {
 
   Optional<User> findByLoginName(String loginName);
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index 2bb132d..2d0b463 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -5,4 +5,4 @@ spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
 spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
 spring.jpa.hibernate.ddl-auto=update
 spring.jpa.defer-datasource-initialization=true
-spring.sql.init.mode=always
\ No newline at end of file
+spring.sql.init.mode=never
\ No newline at end of file
diff --git a/src/main/resources/logback.xml b/src/main/resources/logback.xml
index d6acfcd..1ca2ec9 100644
--- a/src/main/resources/logback.xml
+++ b/src/main/resources/logback.xml
@@ -7,7 +7,15 @@
       </encoder>
     </appender>
 
+    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
+      <encoder>
+        <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
+      </encoder>
+    </appender>
+
+
     <root level="info">
       <appender-ref ref="FILE" />
+      <appender-ref ref="CONSOLE" />
     </root>
   </configuration>
\ No newline at end of file
